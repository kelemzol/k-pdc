module Integration

imports Common
imports KTechnique
imports KBuiltinsBasic

imports Variables

exports

context-free syntax
context-free priorities
{
    "notBool" Bool -> Bool {cons("Bool1367Syn")}
} > {
    Bool "andBool" Bool -> Bool {left, cons("Bool1476Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1353Syn")}
} > {
    Bool "xorBool" Bool -> Bool {left, cons("Bool1225Syn")}
} > {
    Bool "orBool" Bool -> Bool {left, cons("Bool1337Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1473Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1468Syn")}
} > { left:
    Bool "==Bool" Bool -> Bool {left, cons("Bool1383Syn")}
    Bool "=/=Bool" Bool -> Bool {left, cons("Bool1403Syn")}
}

context-free priorities
{
    K "|->" K -> Map {cons("Map173Syn")}
} > {
    Map Map -> Map {left, cons("Map1242Syn")}
}

context-free priorities
{ left:
    K "==K" K -> Bool {left, cons("Bool1483Syn")}
    K "=/=K" K -> Bool {left, cons("Bool188Syn")}
}

context-free priorities
{
    K "==K" K -> Bool {left, cons("Bool1483Syn")}
    Bag "==Bag" Bag -> Bool {left, cons("Bool134Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1307Syn")}
    K "=/=K" K -> Bool {left, cons("Bool188Syn")}
} > {
    Bool "impliesBool" Bool -> Bool {left, cons("Bool1468Syn")}
    "notBool" Bool -> Bool {cons("Bool1367Syn")}
    K "andThenBool" K -> Bool {left, cons("Bool1353Syn")}
    Bool "orBool" Bool -> Bool {left, cons("Bool1337Syn")}
    K "orElseBool" K -> Bool {left, cons("Bool1473Syn")}
    Bool "xorBool" Bool -> Bool {left, cons("Bool1225Syn")}
    Bool "andBool" Bool -> Bool {left, cons("Bool1476Syn")}
}

context-free priorities
{ left:
    Bag "==Bag" Bag -> Bool {left, cons("Bool134Syn")}
    Bag "=/=Bag" Bag -> Bool {left, cons("Bool1307Syn")}
}

context-free priorities
{
    "~Int" Int -> Int {cons("Int1255Syn")}
} > { left:
    Int "^Int" Int -> Int {left, cons("Int170Syn")}
} > { left:
    Int "*Int" Int -> Int {left, cons("Int165Syn")}
    Int "/Int" Int -> Int {left, cons("Int1220Syn")}
    Int "%Int" Int -> Int {left, cons("Int1326Syn")}
    Int "divInt" Int -> Int {left, cons("Int1429Syn")}
    Int "modInt" Int -> Int {left, cons("Int166Syn")}
} > { left:
    Int "+Int" Int -> Int {left, cons("Int1346Syn")}
    Int "-Int" Int -> Int {left, cons("Int1279Syn")}
} > { left:
    Int ">>Int" Int -> Int {left, cons("Int1227Syn")}
    Int "<<Int" Int -> Int {left, cons("Int1249Syn")}
} > { left:
    Int "&Int" Int -> Int {left, cons("Int1252Syn")}
} > { left:
    Int "xorInt" Int -> Int {left, cons("Int194Syn")}
} > { left:
    Int "|Int" Int -> Int {left, cons("Int192Syn")}
}

context-free priorities
{
    "--Float" Float -> Float {cons("Float1343Syn")}
} > {
    Float "^Float" Float -> Float {left, cons("Float19Syn")}
} > { left:
    Float "*Float" Float -> Float {left, cons("Float1229Syn")}
    Float "/Float" Float -> Float {left, cons("Float163Syn")}
    Float "%Float" Float -> Float {left, cons("Float1424Syn")}
} > { left:
    Float "+Float" Float -> Float {left, cons("Float1487Syn")}
    Float "-Float" Float -> Float {left, cons("Float1344Syn")}
}

%% subsorts 1
context-free priorities
{
    Nat -> K
    Set -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    PDdCModuleEntry -> K
    EntryList -> K
    RuleParamList -> K
    PDdCId -> K
    RuleBody -> K
    Int -> K
    PDdCMSGList -> K
    Entry -> K
    PDdCMSG -> K
    Bool -> K
    Char -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    PascalCaseId -> K
    PDdCIdList -> K
    UpperCase -> K
    PDdCModuleEntryList -> K
    Float -> K
    RuleParams -> K
    ExecutionEngine -> K
    IOError -> K
    PDdCRule -> K
    RuleStatus -> K
    Id -> K
    ErrorCode -> K
    Map -> K
    DzFloat -> K
    PDdCModule -> K
} .> {
    DzFloat -> Float
    PDdCId -> RuleParamList
    PDdCMSG -> Entry
    DzInt -> Int
    Entry -> EntryList
    DzBool -> Bool
    DzString -> String
    PDdCId -> Entry
    PDdCRule -> PDdCModuleEntry
} .> {
    K -> Nat
    K -> Set
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> PDdCModuleEntry
    K -> EntryList
    K -> RuleParamList
    K -> PDdCId
    K -> RuleBody
    K -> Int
    K -> PDdCMSGList
    K -> Entry
    K -> PDdCMSG
    K -> Bool
    K -> Char
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> PascalCaseId
    K -> PDdCIdList
    K -> UpperCase
    K -> PDdCModuleEntryList
    K -> Float
    K -> RuleParams
    K -> ExecutionEngine
    K -> IOError
    K -> PDdCRule
    K -> RuleStatus
    K -> Id
    K -> ErrorCode
    K -> Map
    K -> DzFloat
    K -> PDdCModule
}

%% subsorts 1a
context-free priorities
{
    Nat -> K
    Set -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    PDdCModuleEntry -> K
    EntryList -> K
    RuleParamList -> K
    PDdCId -> K
    RuleBody -> K
    Int -> K
    PDdCMSGList -> K
    Entry -> K
    PDdCMSG -> K
    Bool -> K
    Char -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    PascalCaseId -> K
    PDdCIdList -> K
    UpperCase -> K
    PDdCModuleEntryList -> K
    Float -> K
    RuleParams -> K
    ExecutionEngine -> K
    IOError -> K
    PDdCRule -> K
    RuleStatus -> K
    Id -> K
    ErrorCode -> K
    Map -> K
    DzFloat -> K
    PDdCModule -> K
} .> {
    K -> Nat
    K -> Set
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> PDdCModuleEntry
    K -> EntryList
    K -> RuleParamList
    K -> PDdCId
    K -> RuleBody
    K -> Int
    K -> PDdCMSGList
    K -> Entry
    K -> PDdCMSG
    K -> Bool
    K -> Char
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> PascalCaseId
    K -> PDdCIdList
    K -> UpperCase
    K -> PDdCModuleEntryList
    K -> Float
    K -> RuleParams
    K -> ExecutionEngine
    K -> IOError
    K -> PDdCRule
    K -> RuleStatus
    K -> Id
    K -> ErrorCode
    K -> Map
    K -> DzFloat
    K -> PDdCModule
}

%% subsorts 2
context-free priorities
{
    K -> Nat
    K -> Set
    K -> MInt
    K -> LowerCase
    K -> CamelCaseId
    K -> String
    K -> PDdCModuleEntry
    K -> EntryList
    K -> RuleParamList
    K -> PDdCId
    K -> RuleBody
    K -> Int
    K -> PDdCMSGList
    K -> Entry
    K -> PDdCMSG
    K -> Bool
    K -> Char
    K -> List
    K -> Stream
    K -> DzInt
    K -> DzString
    K -> DzBool
    K -> PascalCaseId
    K -> PDdCIdList
    K -> UpperCase
    K -> PDdCModuleEntryList
    K -> Float
    K -> RuleParams
    K -> ExecutionEngine
    K -> IOError
    K -> PDdCRule
    K -> RuleStatus
    K -> Id
    K -> ErrorCode
    K -> Map
    K -> DzFloat
    K -> PDdCModule
} .> {
    Nat -> K
    Set -> K
    MInt -> K
    LowerCase -> K
    CamelCaseId -> K
    String -> K
    PDdCModuleEntry -> K
    EntryList -> K
    RuleParamList -> K
    PDdCId -> K
    RuleBody -> K
    Int -> K
    PDdCMSGList -> K
    Entry -> K
    PDdCMSG -> K
    Bool -> K
    Char -> K
    List -> K
    Stream -> K
    DzInt -> K
    DzString -> K
    DzBool -> K
    PascalCaseId -> K
    PDdCIdList -> K
    UpperCase -> K
    PDdCModuleEntryList -> K
    Float -> K
    RuleParams -> K
    ExecutionEngine -> K
    IOError -> K
    PDdCRule -> K
    RuleStatus -> K
    Id -> K
    ErrorCode -> K
    Map -> K
    DzFloat -> K
    PDdCModule -> K
}
context-free syntax
    "#buffer" "(" InsertDzK ")" -> Stream {cons("Stream10Syn")}
    "#read" "(" InsertDzInt "," InsertDzInt ")" -> KItem {cons("KItem12Syn")}
    RuleStatus "=/=RuleStatus" RuleStatus -> Bool {cons("Bool13Syn")}
    K "inKList" KList -> Bool {cons("Bool14Syn")}
    "findChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int15Syn")}
    "prepareE" "(" InsertDzEntry ")" -> Entry {cons("Entry16Syn")}
    "@LC" "(" InsertDzId ")" -> PDdCId {cons("PDdCId17Syn")}
    "#EISDIR" -> IOError {cons("IOError18Syn")}
    "@InitModule" -> RuleStatus {cons("RuleStatus120Syn")}
    "removeAll" "(" InsertDzMap "," InsertDzSet ")" -> Map {cons("Map122Syn")}
    Map "[" InsertDzK "<-" InsertDzK "]" -> Map {cons("Map123Syn")}
    "sqrtFloat" "(" InsertDzFloat ")" -> Float {cons("Float124Syn")}
    Map "=Map" Map -> Bool {cons("Bool125Syn")}
    "sinFloat" "(" InsertDzFloat ")" -> Float {cons("Float126Syn")}
    Entry EntryList -> EntryList {right, cons("EntryList127Syn")}
    Set "=Set" Set -> Bool {cons("Bool128Syn")}
    String "<String" String -> Bool {cons("Bool129Syn")}
    "values" "(" InsertDzMap ")" -> List {cons("List130Syn")}
    "roundFloat" "(" InsertDzFloat "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float132Syn")}
    PDdCMSG "=/=PDCMSG" PDdCMSG -> Bool {cons("Bool133Syn")}
    ".List" -> List {cons("List135Syn")}
    "@NotFindMainRule" -> ErrorCode {cons("ErrorCode136Syn")}
    "#EBADF" -> IOError {cons("IOError137Syn")}
    "#ostream" "(" InsertDzInt ")" -> Stream {cons("Stream138Syn")}
    PDdCId "," RuleParamList -> RuleParamList {right, cons("RuleParamList139Syn")}
    "KLabel2String" "(" InsertDzKLabel ")" -> String {cons("String140Syn")}
    "isBuiltin" "(" InsertDzK ")" -> Bool {cons("Bool142Syn")}
    "pvs" "(" InsertDzPDdCIdList ")" -> PDdCIdList {cons("PDdCIdList143Syn")}
    "signFloat" "(" InsertDzFloat ")" -> Bool {cons("Bool144Syn")}
    "#stderr" -> Int {cons("Int145Syn")}
    "isKResult" "(" InsertDzKItem ")" -> Bool {cons("Bool146Syn")}
    "exponentFloat" "(" InsertDzFloat ")" -> Int {cons("Int147Syn")}
    Map "-Map" Map -> Map {cons("Map148Syn")}
    "minValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float149Syn")}
    "categoryChar" "(" InsertDzString ")" -> String {cons("String150Syn")}
    "substrString" "(" InsertDzString "," InsertDzInt "," InsertDzInt ")" -> String {cons("String152Syn")}
    Int "dividesInt" Int -> Bool {cons("Bool153Syn")}
    "String2KLabel" "(" InsertDzString ")" -> KLabel {cons("KLabel154Syn")}
    "rulestatusCase" "(" InsertDzBool "," InsertDzRuleStatus "," InsertDzRuleStatus ")" -> RuleStatus {cons("RuleStatus155Syn")}
    "#parseInput" "(" InsertDzString "," InsertDzString ")" -> Stream {cons("Stream156Syn")}
    "NotEmptyEL" "(" InsertDzEntryList ")" -> Bool {cons("Bool157Syn")}
    PDdCMSG "==PDCMSGPartial" PDdCMSG -> Bool {cons("Bool158Syn")}
    "@InitStructuralCheck" -> RuleStatus {cons("RuleStatus159Syn")}
    String "=/=String" String -> Bool {left, cons("Bool160Syn")}
    "freshId" "(" InsertDzInt ")" -> Id {cons("Id162Syn")}
    DzInt -> Int {}
    PDdCId -> Entry {}
    "#freezer" K -> KLabel {cons("KLabel164Syn")}
    PDdCId -> RuleParamList {}
    "ordChar" "(" InsertDzString ")" -> Int {cons("Int167Syn")}
    "isPV" "(" InsertDzPDdCId ")" -> Bool {cons("Bool168Syn")}
    "isPI" "(" InsertDzPDdCId ")" -> Bool {cons("Bool169Syn")}
    PDdCId "==PDCId" PDdCId -> Bool {left, cons("Bool172Syn")}
    K "|->" K -> Map {cons("Map173Syn")}
    "freshInt" "(" InsertDzInt ")" -> Int {cons("Int174Syn")}
    "size" "(" InsertDzList ")" -> Int {cons("Int175Syn")}
    "checkRule" "(" InsertDzPDdCRule ")" -> Bool {cons("Bool176Syn")}
    "updateMap" "(" InsertDzMap "," InsertDzMap ")" -> Map {cons("Map177Syn")}
    Int "=Int" Int -> Bool {cons("Bool178Syn")}
    "getRules" "(" InsertDzPDdCModule ")" -> PDdCModuleEntryList {cons("PDdCModuleEntryList179Syn")}
    "ListItem" "(" InsertDzK ")" -> List {cons("List180Syn")}
    "ruleId" "(" InsertDzPDdCRule ")" -> PDdCId {cons("PDdCId182Syn")}
    "getMainRule" "(" InsertDzPDdCModule ")" -> PDdCRule {cons("PDdCRule183Syn")}
    "expFloat" "(" InsertDzFloat ")" -> Float {cons("Float184Syn")}
    "rfindChar" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int185Syn")}
    "@UC" "(" InsertDzId ")" -> PDdCId {cons("PDdCId186Syn")}
    "acosFloat" "(" InsertDzFloat ")" -> Float {cons("Float187Syn")}
    "prepareB" "(" InsertDzRuleBody ")" -> EntryList {cons("EntryList189Syn")}
    "@start" Entry -> Entry {cons("Entry190Syn")}
    "checkModule" "(" InsertDzPDdCModule ")" -> Bool {cons("Bool193Syn")}
    "#lstat" "(" InsertDzString ")" -> KList {cons("KList195Syn")}
    PDdCMSG PDdCMSGList -> PDdCMSGList {right, cons("PDdCMSGList196Syn")}
    "trim" "(" InsertDzString ")" -> String {cons("String197Syn")}
    "#parseInModule" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem198Syn")}
    "idRemove" "(" InsertDzPDdCId "," InsertDzPDdCIdList ")" -> PDdCIdList {cons("PDdCIdList199Syn")}
    "maxFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1200Syn")}
    "#opendir" "(" InsertDzString ")" -> KList {cons("KList1202Syn")}
    "dependentMSG" "(" InsertDzPDdCMSG "," InsertDzPDdCIdList ")" -> Bool {cons("Bool1203Syn")}
    Int "<Int" Int -> Bool {left, cons("Bool1204Syn")}
    KLabel "=KLabel" KLabel -> Bool {cons("Bool1205Syn")}
    "exponentBitsFloat" "(" InsertDzFloat ")" -> Int {cons("Int1206Syn")}
    "absInt" "(" InsertDzInt ")" -> Int {cons("Int1207Syn")}
    "String2Float" "(" InsertDzString ")" -> Float {cons("Float1208Syn")}
    "errorCase" "(" InsertDzBool "," InsertDzErrorCode "," InsertDzErrorCode ")" -> ErrorCode {cons("ErrorCode1209Syn")}
    ".PDCRule" -> PDdCRule {cons("PDdCRule1222Syn")}
    "Float2Int" "(" InsertDzFloat ")" -> Int {cons("Int1223Syn")}
    "cool" "(" InsertDzK ")" -> K {cons("K1224Syn")}
    "range" "(" InsertDzList "," InsertDzInt "," InsertDzInt ")" -> List {cons("List1226Syn")}
    "rtrim" "(" InsertDzString ")" -> String {cons("String1228Syn")}
    "cosFloat" "(" InsertDzFloat ")" -> Float {cons("Float1230Syn")}
    "chrChar" "(" InsertDzInt ")" -> String {cons("String1232Syn")}
    "directionalityChar" "(" InsertDzString ")" -> String {cons("String1233Syn")}
    "notContainProcessVariable" "(" InsertDzPDdCMSG ")" -> Bool {cons("Bool1234Syn")}
    DzBool -> Bool {}
    "isNaN" "(" InsertDzFloat ")" -> Bool {cons("Bool1235Syn")}
    Set "<=Set" Set -> Bool {cons("Bool1236Syn")}
    Entry -> EntryList {}
    KList "=KList" KList -> Bool {cons("Bool1237Syn")}
    Float ">=Float" Float -> Bool {left, cons("Bool1238Syn")}
    "pisOfMsg" "(" InsertDzPDdCMSG ")" -> PDdCIdList {cons("PDdCIdList1239Syn")}
    "@optional" RuleBody -> Entry {cons("Entry1240Syn")}
    Map Map -> Map {left, cons("Map1242Syn")}
    Float "<Float" Float -> Bool {left, cons("Bool1243Syn")}
    "atan2Float" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1244Syn")}
    "Float2String" "(" InsertDzFloat ")" -> String {cons("String1245Syn")}
    "(" InsertDzRuleParamList ")" -> RuleParams {cons("RuleParams1246Syn")}
    "#putc" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1247Syn")}
    "randomRandom" "(" InsertDzInt ")" -> Int {cons("Int1248Syn")}
    "#noIO" -> Stream {cons("Stream1250Syn")}
    Float "=/=Float" Float -> Bool {left, cons("Bool1253Syn")}
    "#tokenToString" "(" InsertDzK ")" -> String {cons("String1254Syn")}
    "#EACCES" -> IOError {cons("IOError1256Syn")}
    List "=List" List -> Bool {cons("Bool1257Syn")}
    "#parse" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1258Syn")}
    "intersectSet" "(" InsertDzSet "," InsertDzSet ")" -> Set {cons("Set1259Syn")}
    "Base2String" "(" InsertDzInt "," InsertDzInt ")" -> String {cons("String1260Syn")}
    "findString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1262Syn")}
    "Int2String" "(" InsertDzInt ")" -> String {cons("String1263Syn")}
    "processModule" "(" InsertDzPDdCModuleEntryList ")" -> PDdCModule {cons("PDdCModule1265Syn")}
    Set Set -> Set {left, cons("Set1266Syn")}
    "findMainRuleId" "(" InsertDzPDdCModuleEntryList ")" -> PDdCId {cons("PDdCId1267Syn")}
    PDdCId "=/=PDCId" PDdCId -> Bool {left, cons("Bool1268Syn")}
    Map "[" InsertDzK "]" -> K {cons("K1269Syn")}
    "ltrim" "(" InsertDzString ")" -> String {cons("String1270Syn")}
    "verifyModule" "(" InsertDzPDdCModule ")" -> PDdCModule {cons("PDdCModule1272Syn")}
    "#write" "(" InsertDzInt "," InsertDzString ")" -> K {cons("K1273Syn")}
    "(" ")" -> RuleParams {cons("RuleParams1274Syn")}
    PDdCMSG -> Entry {}
    K "#inKList" KList -> Bool {cons("Bool1275Syn")}
    "rootFloat" "(" InsertDzFloat "," InsertDzInt ")" -> Float {cons("Float1276Syn")}
    "absFloat" "(" InsertDzFloat ")" -> Float {cons("Float1277Syn")}
    "idIsMember" "(" InsertDzPDdCId "," InsertDzPDdCIdList ")" -> Bool {cons("Bool1278Syn")}
    "#if" InsertDzBool "#then" InsertDzK "#else" InsertDzK "#fi" -> K {cons("K1280Syn")}
    "lookupRule" "(" InsertDzPDdCId "," InsertDzPDdCModuleEntryList ")" -> PDdCRule {cons("PDdCRule1282Syn")}
    "#isWhiteSpace" "(" InsertDzString ")" -> Bool {cons("Bool1283Syn")}
    "SetItem" "(" InsertDzK ")" -> Set {cons("Set1284Syn")}
    "logFloat" "(" InsertDzFloat ")" -> Float {cons("Float1285Syn")}
    "isEmptyPDCMSGList" "(" InsertDzPDdCMSGList ")" -> Bool {cons("Bool1286Syn")}
    "#open" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1287Syn")}
    "choice" "(" InsertDzSet ")" -> K {cons("K1288Syn")}
    "pis" "(" InsertDzPDdCIdList ")" -> PDdCIdList {cons("PDdCIdList1289Syn")}
    KLabel "==KLabel" KLabel -> Bool {cons("Bool1290Syn")}
    "@PDCModule" "(" InsertDzPDdCRule "," InsertDzPDdCModuleEntryList ")" -> PDdCModule {cons("PDdCModule1292Syn")}
    "String2Int" "(" InsertDzString ")" -> Int {cons("Int1293Syn")}
    "paramListToIdList" "(" InsertDzRuleParams ")" -> PDdCIdList {cons("PDdCIdList1294Syn")}
    K -> KList {}
    KList "=/=KList" KList -> Bool {cons("Bool1295Syn")}
    Int "=/=Int" Int -> Bool {left, cons("Bool1296Syn")}
    "#isDigit" "(" InsertDzString ")" -> Bool {cons("Bool1297Syn")}
    PDdCMSG "==PDCMSG" PDdCMSG -> Bool {left, cons("Bool1298Syn")}
    "@start" "@instantly" -> Entry {cons("Entry1299Syn")}
    DzString -> String {}
    "@NoError" -> ErrorCode {cons("ErrorCode1300Syn")}
    "fpNaN" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1302Syn")}
    "appendEL" "(" InsertDzEntryList "," InsertDzEntryList ")" -> EntryList {cons("EntryList1303Syn")}
    "prepareEL" "(" InsertDzEntryList ")" -> EntryList {cons("EntryList1304Syn")}
    "isInfinite" "(" InsertDzFloat ")" -> Bool {cons("Bool1306Syn")}
    "isEmptyEntryList" "(" InsertDzEntryList ")" -> Bool {cons("Bool1308Syn")}
    "fresh" "(" InsertDzString ")" -> KItem {cons("KItem1309Syn")}
    "@Passive" -> RuleStatus {cons("RuleStatus1320Syn")}
    DzFloat -> Float {}
    "@InitInclude" -> RuleStatus {cons("RuleStatus1323Syn")}
    "rfindString" "(" InsertDzString "," InsertDzString "," InsertDzInt ")" -> Int {cons("Int1324Syn")}
    ".PDCId" -> PDdCId {cons("PDdCId1325Syn")}
    "Id2String" "(" InsertDzId ")" -> String {cons("String1327Syn")}
    "#ELOOP" -> IOError {cons("IOError1328Syn")}
    Set "-Set" Set -> Set {cons("Set1329Syn")}
    "String2Base" "(" InsertDzString "," InsertDzInt ")" -> Int {cons("Int1330Syn")}
    ".PDCIdList" -> PDdCIdList {cons("PDdCIdList1332Syn")}
    "keys" "(" InsertDzMap ")" -> Set {cons("Set1333Syn")}
    "#systemResult" "(" InsertDzInt "," InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1334Syn")}
    "boundMSGVariables" "(" InsertDzPDdCMSG "," InsertDzPDdCMSG "," InsertDzEntryList ")" -> EntryList {cons("EntryList1335Syn")}
    "#stdin" -> Int {cons("Int1336Syn")}
    "maxInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1338Syn")}
    "lengthString" "(" InsertDzString ")" -> Int {cons("Int1339Syn")}
    "#configuration" -> Bag {cons("Bag1340Syn")}
    "@InitPrepare" -> RuleStatus {cons("RuleStatus1342Syn")}
    "@InitStart" -> RuleStatus {cons("RuleStatus1345Syn")}
    "ruleParams" "(" InsertDzPDdCRule ")" -> RuleParams {cons("RuleParams1347Syn")}
    "idConcat" "(" InsertDzPDdCIdList "," InsertDzPDdCIdList ")" -> PDdCIdList {cons("PDdCIdList1348Syn")}
    "#parseToken" "(" InsertDzString "," InsertDzString ")" -> KItem {cons("KItem1349Syn")}
    "@more-of" RuleBody -> Entry {cons("Entry1350Syn")}
    "#system" "(" InsertDzString ")" -> KItem {cons("KItem1354Syn")}
    "#stat" "(" InsertDzString ")" -> KList {cons("KList1355Syn")}
    Float "<=Float" Float -> Bool {left, cons("Bool1356Syn")}
    KItem -> K {}
    "tanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1357Syn")}
    "replace" "(" InsertDzString "," InsertDzString "," InsertDzString "," InsertDzInt ")" -> String {cons("String1358Syn")}
    ".Set" -> Set {cons("Set1359Syn")}
    "@rule" InsertDzPDdCId InsertDzRuleParams RuleBody -> PDdCRule {cons("PDdCRule1360Syn")}
    "structuralCheck" "(" InsertDzPDdCModule ")" -> Bool {cons("Bool1362Syn")}
    "#close" "(" InsertDzInt ")" -> K {cons("K1363Syn")}
    "minInt" "(" InsertDzInt "," InsertDzInt ")" -> Int {cons("Int1364Syn")}
    "@many-of" RuleBody -> Entry {cons("Entry1365Syn")}
    List List -> List {left, cons("List1366Syn")}
    "@DirectExecution" -> ExecutionEngine {cons("ExecutionEngine1368Syn")}
    "maxValueFloat" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1369Syn")}
    "@Success" -> RuleStatus {cons("RuleStatus1370Syn")}
    Map "<=Map" Map -> Bool {cons("Bool1372Syn")}
    PDdCModuleEntry PDdCModuleEntryList -> PDdCModuleEntryList {right, cons("PDdCModuleEntryList1373Syn")}
    Int ">Int" Int -> Bool {left, cons("Bool1374Syn")}
    "String2Id" "(" InsertDzString ")" -> Id {cons("Id1375Syn")}
    "ceilFloat" "(" InsertDzFloat ")" -> Float {cons("Float1376Syn")}
    "@start" RuleBody -> Entry {cons("Entry1377Syn")}
    "#ENOTDIR" -> IOError {cons("IOError1378Syn")}
    String "==String" String -> Bool {left, cons("Bool1379Syn")}
    "@AlgebraicExecution" -> ExecutionEngine {cons("ExecutionEngine1380Syn")}
    "atanFloat" "(" InsertDzFloat ")" -> Float {cons("Float1382Syn")}
    String "+String" String -> String {left, cons("String1384Syn")}
    "@Running" -> RuleStatus {cons("RuleStatus1385Syn")}
    ".EntryList" -> EntryList {cons("EntryList1386Syn")}
    String ">=String" String -> Bool {cons("Bool1387Syn")}
    PDdCRule -> PDdCModuleEntry {}
    K "in" Set -> Bool {cons("Bool1388Syn")}
    Int "<=Int" Int -> Bool {left, cons("Bool1389Syn")}
    ".Map" -> Map {cons("Map1390Syn")}
    KLabel "=/=KLabel" KLabel -> Bool {cons("Bool1392Syn")}
    KList "==KList" KList -> Bool {cons("Bool1393Syn")}
    "insertIdsOfMsg" "(" InsertDzPDdCMSG "," InsertDzPDdCIdList ")" -> PDdCIdList {cons("PDdCIdList1394Syn")}
    Int "==Int" Int -> Bool {left, cons("Bool1395Syn")}
    "Char2String" "(" InsertDzChar ")" -> String {cons("String1397Syn")}
    "replaceAll" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1398Syn")}
    Int ">=Int" Int -> Bool {left, cons("Bool1399Syn")}
    ".PDCMSGList" -> PDdCMSGList {cons("PDdCMSGList1400Syn")}
    "#ENOENT" -> IOError {cons("IOError1402Syn")}
    "#EINVAL" -> IOError {cons("IOError1404Syn")}
    String ">String" String -> Bool {cons("Bool1405Syn")}
    Bag "=Bag" Bag -> Bool {cons("Bool1406Syn")}
    "isToken" "(" InsertDzK ")" -> Bool {cons("Bool1407Syn")}
    ".RuleParamList" -> RuleParamList {cons("RuleParamList1408Syn")}
    "floorFloat" "(" InsertDzFloat ")" -> Float {cons("Float1409Syn")}
    "precisionFloat" "(" InsertDzFloat ")" -> Int {cons("Int1420Syn")}
    "idInsert" "(" InsertDzPDdCId "," InsertDzPDdCIdList ")" -> PDdCIdList {cons("PDdCIdList1422Syn")}
    List "[" InsertDzInt "]" -> K {cons("K1423Syn")}
    "String2Char" "(" InsertDzString ")" -> Char {cons("Char1425Syn")}
    "#stdout" -> Int {cons("Int1426Syn")}
    "@StructuralError" -> ErrorCode {cons("ErrorCode1427Syn")}
    "ruleBody" "(" InsertDzPDdCRule ")" -> RuleBody {cons("RuleBody1428Syn")}
    "#noparse" -> IOError {cons("IOError1430Syn")}
    "@MSG" "(" InsertDzPDdCId "," InsertDzPDdCId "," InsertDzPDdCId ")" -> PDdCMSG {cons("PDdCMSG1432Syn")}
    Float ">Float" Float -> Bool {left, cons("Bool1433Syn")}
    ".PDCModule" -> PDdCModule {cons("PDdCModule1434Syn")}
    "boundVariable" "(" InsertDzPDdCId "," InsertDzPDdCId "," InsertDzEntryList ")" -> EntryList {cons("EntryList1435Syn")}
    "minusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1436Syn")}
    "Int2Float" "(" InsertDzInt "," InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1437Syn")}
    "#istream" "(" InsertDzInt ")" -> Stream {cons("Stream1438Syn")}
    "replaceFirst" "(" InsertDzString "," InsertDzString "," InsertDzString ")" -> String {cons("String1439Syn")}
    "countAllOccurrences" "(" InsertDzString "," InsertDzString ")" -> Int {cons("Int1440Syn")}
    "{" "}" -> RuleBody {cons("RuleBody1442Syn")}
    KResult -> KItem {}
    "isEmptyPCDIdList" "(" InsertDzPDdCIdList ")" -> Bool {cons("Bool1443Syn")}
    "@one-of" RuleBody -> Entry {cons("Entry1444Syn")}
    "plusInfinity" "(" InsertDzInt "," InsertDzInt ")" -> Float {cons("Float1445Syn")}
    "#ENAMETOOLONG" -> IOError {cons("IOError1446Syn")}
    "containProcessVariable" "(" InsertDzPDdCMSG ")" -> Bool {cons("Bool1447Syn")}
    "@main-rule" PDdCId -> PDdCModuleEntry {cons("PDdCModuleEntry1448Syn")}
    "significandFloat" "(" InsertDzFloat ")" -> MInt {cons("MInt1449Syn")}
    "getKLabel" K -> KLabel {cons("KLabel1450Syn")}
    "@NoDeclaredMainRule" -> ErrorCode {cons("ErrorCode1452Syn")}
    Float "==Float" Float -> Bool {left, cons("Bool1453Syn")}
    PDdCId PDdCIdList -> PDdCIdList {right, cons("PDdCIdList1454Syn")}
    ".PDCModuleEntryList" -> PDdCModuleEntryList {cons("PDdCModuleEntryList1455Syn")}
    "pvsOfMsg" "(" InsertDzPDdCMSG ")" -> PDdCIdList {cons("PDdCIdList1456Syn")}
    "size" "(" InsertDzMap ")" -> Int {cons("Int1457Syn")}
    "dummy" "(" InsertDzKList ")" -> KItem {cons("KItem1458Syn")}
    "bool2Int" "(" InsertDzBool ")" -> Int {cons("Int1459Syn")}
    "#getc" "(" InsertDzInt ")" -> KItem {cons("KItem1460Syn")}
    "@SequenceMissmatch" -> ErrorCode {cons("ErrorCode1462Syn")}
    "minFloat" "(" InsertDzFloat "," InsertDzFloat ")" -> Float {cons("Float1464Syn")}
    String "<=String" String -> Bool {cons("Bool1465Syn")}
    "Float2String" "(" InsertDzFloat "," InsertDzString ")" -> String {cons("String1466Syn")}
    "#EOF" -> IOError {cons("IOError1467Syn")}
    "#tell" "(" InsertDzInt ")" -> KItem {cons("KItem1469Syn")}
    "#open" "(" InsertDzString ")" -> KItem {cons("KItem1470Syn")}
    RuleStatus "==RuleStatus" RuleStatus -> Bool {cons("Bool1472Syn")}
    "choice" "(" InsertDzMap ")" -> K {cons("K1474Syn")}
    "@seq" RuleBody -> Entry {cons("Entry1475Syn")}
    "{" InsertDzEntryList "}" -> RuleBody {cons("RuleBody1477Syn")}
    "@Failed" -> RuleStatus {cons("RuleStatus1478Syn")}
    K "=K" K -> Bool {cons("Bool1479Syn")}
    "size" "(" InsertDzSet ")" -> Int {cons("Int1480Syn")}
    "@optional" Entry -> Entry {cons("Entry1482Syn")}
    "#ESPIPE" -> IOError {cons("IOError1484Syn")}
    Map "[" InsertDzK "<-" "undef" "]" -> Map {cons("Map1485Syn")}
    K "in" List -> Bool {cons("Bool1486Syn")}
    "#seek" "(" InsertDzInt "," InsertDzInt ")" -> K {cons("K1488Syn")}
    "@EmptyOneOf" -> ErrorCode {cons("ErrorCode1489Syn")}
    "#ioError" "(" InsertDzString ")" -> KItem {cons("KItem1490Syn")}
    "asinFloat" "(" InsertDzFloat ")" -> Float {cons("Float1492Syn")}
    Set    -> InsertDzSet
    K    -> InsertDzK
    String    -> InsertDzString
    EntryList    -> InsertDzEntryList
    RuleParamList    -> InsertDzRuleParamList
    KList    -> InsertDzKList
    PDdCId    -> InsertDzPDdCId
    RuleBody    -> InsertDzRuleBody
    Int    -> InsertDzInt
    PDdCMSGList    -> InsertDzPDdCMSGList
    Entry    -> InsertDzEntry
    PDdCMSG    -> InsertDzPDdCMSG
    Bool    -> InsertDzBool
    Char    -> InsertDzChar
    List    -> InsertDzList
    PDdCIdList    -> InsertDzPDdCIdList
    PDdCModuleEntryList    -> InsertDzPDdCModuleEntryList
    Float    -> InsertDzFloat
    KLabel    -> InsertDzKLabel
    RuleParams    -> InsertDzRuleParams
    PDdCRule    -> InsertDzPDdCRule
    RuleStatus    -> InsertDzRuleStatus
    Id    -> InsertDzId
    ErrorCode    -> InsertDzErrorCode
    Map    -> InsertDzMap
    KItem    -> InsertDzKItem
    PDdCModule    -> InsertDzPDdCModule


    VARID  ":Nat"        -> NatDzVar            {cons("Nat12Var")}
    VARID  ":Nat{" TagListDz "}"        -> NatDzVar            {cons("Nat12VarAttr")}
    VARID  ":Set"        -> SetDzVar            {cons("Set12Var")}
    VARID  ":Set{" TagListDz "}"        -> SetDzVar            {cons("Set12VarAttr")}
    VARID  ":MInt"        -> MIntDzVar            {cons("MInt12Var")}
    VARID  ":MInt{" TagListDz "}"        -> MIntDzVar            {cons("MInt12VarAttr")}
    VARID  ":LowerCase"        -> LowerCaseDzVar            {cons("LowerCase12Var")}
    VARID  ":LowerCase{" TagListDz "}"        -> LowerCaseDzVar            {cons("LowerCase12VarAttr")}
    VARID  ":CamelCaseId"        -> CamelCaseIdDzVar            {cons("CamelCaseId12Var")}
    VARID  ":CamelCaseId{" TagListDz "}"        -> CamelCaseIdDzVar            {cons("CamelCaseId12VarAttr")}
    VARID  ":String"        -> StringDzVar            {cons("String12Var")}
    VARID  ":String{" TagListDz "}"        -> StringDzVar            {cons("String12VarAttr")}
    VARID  ":PDCModuleEntry"        -> PDdCModuleEntryDzVar            {cons("PDdCModuleEntry12Var")}
    VARID  ":PDCModuleEntry{" TagListDz "}"        -> PDdCModuleEntryDzVar            {cons("PDdCModuleEntry12VarAttr")}
    VARID  ":EntryList"        -> EntryListDzVar            {cons("EntryList12Var")}
    VARID  ":EntryList{" TagListDz "}"        -> EntryListDzVar            {cons("EntryList12VarAttr")}
    VARID  ":RuleParamList"        -> RuleParamListDzVar            {cons("RuleParamList12Var")}
    VARID  ":RuleParamList{" TagListDz "}"        -> RuleParamListDzVar            {cons("RuleParamList12VarAttr")}
    VARID  ":PDCId"        -> PDdCIdDzVar            {cons("PDdCId12Var")}
    VARID  ":PDCId{" TagListDz "}"        -> PDdCIdDzVar            {cons("PDdCId12VarAttr")}
    VARID  ":RuleBody"        -> RuleBodyDzVar            {cons("RuleBody12Var")}
    VARID  ":RuleBody{" TagListDz "}"        -> RuleBodyDzVar            {cons("RuleBody12VarAttr")}
    VARID  ":Int"        -> IntDzVar            {cons("Int12Var")}
    VARID  ":Int{" TagListDz "}"        -> IntDzVar            {cons("Int12VarAttr")}
    VARID  ":PDCMSGList"        -> PDdCMSGListDzVar            {cons("PDdCMSGList12Var")}
    VARID  ":PDCMSGList{" TagListDz "}"        -> PDdCMSGListDzVar            {cons("PDdCMSGList12VarAttr")}
    VARID  ":Entry"        -> EntryDzVar            {cons("Entry12Var")}
    VARID  ":Entry{" TagListDz "}"        -> EntryDzVar            {cons("Entry12VarAttr")}
    VARID  ":PDCMSG"        -> PDdCMSGDzVar            {cons("PDdCMSG12Var")}
    VARID  ":PDCMSG{" TagListDz "}"        -> PDdCMSGDzVar            {cons("PDdCMSG12VarAttr")}
    VARID  ":Bool"        -> BoolDzVar            {cons("Bool12Var")}
    VARID  ":Bool{" TagListDz "}"        -> BoolDzVar            {cons("Bool12VarAttr")}
    VARID  ":Char"        -> CharDzVar            {cons("Char12Var")}
    VARID  ":Char{" TagListDz "}"        -> CharDzVar            {cons("Char12VarAttr")}
    VARID  ":List"        -> ListDzVar            {cons("List12Var")}
    VARID  ":List{" TagListDz "}"        -> ListDzVar            {cons("List12VarAttr")}
    VARID  ":Stream"        -> StreamDzVar            {cons("Stream12Var")}
    VARID  ":Stream{" TagListDz "}"        -> StreamDzVar            {cons("Stream12VarAttr")}
    VARID  ":#Int"        -> DzIntDzVar            {cons("DzInt12Var")}
    VARID  ":#Int{" TagListDz "}"        -> DzIntDzVar            {cons("DzInt12VarAttr")}
    VARID  ":#String"        -> DzStringDzVar            {cons("DzString12Var")}
    VARID  ":#String{" TagListDz "}"        -> DzStringDzVar            {cons("DzString12VarAttr")}
    VARID  ":#Bool"        -> DzBoolDzVar            {cons("DzBool12Var")}
    VARID  ":#Bool{" TagListDz "}"        -> DzBoolDzVar            {cons("DzBool12VarAttr")}
    VARID  ":PascalCaseId"        -> PascalCaseIdDzVar            {cons("PascalCaseId12Var")}
    VARID  ":PascalCaseId{" TagListDz "}"        -> PascalCaseIdDzVar            {cons("PascalCaseId12VarAttr")}
    VARID  ":PDCIdList"        -> PDdCIdListDzVar            {cons("PDdCIdList12Var")}
    VARID  ":PDCIdList{" TagListDz "}"        -> PDdCIdListDzVar            {cons("PDdCIdList12VarAttr")}
    VARID  ":UpperCase"        -> UpperCaseDzVar            {cons("UpperCase12Var")}
    VARID  ":UpperCase{" TagListDz "}"        -> UpperCaseDzVar            {cons("UpperCase12VarAttr")}
    VARID  ":PDCModuleEntryList"        -> PDdCModuleEntryListDzVar            {cons("PDdCModuleEntryList12Var")}
    VARID  ":PDCModuleEntryList{" TagListDz "}"        -> PDdCModuleEntryListDzVar            {cons("PDdCModuleEntryList12VarAttr")}
    VARID  ":Float"        -> FloatDzVar            {cons("Float12Var")}
    VARID  ":Float{" TagListDz "}"        -> FloatDzVar            {cons("Float12VarAttr")}
    VARID  ":RuleParams"        -> RuleParamsDzVar            {cons("RuleParams12Var")}
    VARID  ":RuleParams{" TagListDz "}"        -> RuleParamsDzVar            {cons("RuleParams12VarAttr")}
    VARID  ":ExecutionEngine"        -> ExecutionEngineDzVar            {cons("ExecutionEngine12Var")}
    VARID  ":ExecutionEngine{" TagListDz "}"        -> ExecutionEngineDzVar            {cons("ExecutionEngine12VarAttr")}
    VARID  ":IOError"        -> IOErrorDzVar            {cons("IOError12Var")}
    VARID  ":IOError{" TagListDz "}"        -> IOErrorDzVar            {cons("IOError12VarAttr")}
    VARID  ":PDCRule"        -> PDdCRuleDzVar            {cons("PDdCRule12Var")}
    VARID  ":PDCRule{" TagListDz "}"        -> PDdCRuleDzVar            {cons("PDdCRule12VarAttr")}
    VARID  ":RuleStatus"        -> RuleStatusDzVar            {cons("RuleStatus12Var")}
    VARID  ":RuleStatus{" TagListDz "}"        -> RuleStatusDzVar            {cons("RuleStatus12VarAttr")}
    VARID  ":Id"        -> IdDzVar            {cons("Id12Var")}
    VARID  ":Id{" TagListDz "}"        -> IdDzVar            {cons("Id12VarAttr")}
    VARID  ":ErrorCode"        -> ErrorCodeDzVar            {cons("ErrorCode12Var")}
    VARID  ":ErrorCode{" TagListDz "}"        -> ErrorCodeDzVar            {cons("ErrorCode12VarAttr")}
    VARID  ":Map"        -> MapDzVar            {cons("Map12Var")}
    VARID  ":Map{" TagListDz "}"        -> MapDzVar            {cons("Map12VarAttr")}
    VARID  ":#Float"        -> DzFloatDzVar            {cons("DzFloat12Var")}
    VARID  ":#Float{" TagListDz "}"        -> DzFloatDzVar            {cons("DzFloat12VarAttr")}
    VARID  ":PDCModule"        -> PDdCModuleDzVar            {cons("PDdCModule12Var")}
    VARID  ":PDCModule{" TagListDz "}"        -> PDdCModuleDzVar            {cons("PDdCModule12VarAttr")}

     K CastTypeDz "Nat"    -> VariableDz    {cons("Nat1Cast")}
     K CastTypeDz "Nat{" TagListDz "}"    -> VariableDz    {cons("Nat1CastAttr")}
     K CastTypeDz "Set"    -> VariableDz    {cons("Set1Cast")}
     K CastTypeDz "Set{" TagListDz "}"    -> VariableDz    {cons("Set1CastAttr")}
     K CastTypeDz "MInt"    -> VariableDz    {cons("MInt1Cast")}
     K CastTypeDz "MInt{" TagListDz "}"    -> VariableDz    {cons("MInt1CastAttr")}
     K CastTypeDz "LowerCase"    -> VariableDz    {cons("LowerCase1Cast")}
     K CastTypeDz "LowerCase{" TagListDz "}"    -> VariableDz    {cons("LowerCase1CastAttr")}
     K CastTypeDz "CamelCaseId"    -> VariableDz    {cons("CamelCaseId1Cast")}
     K CastTypeDz "CamelCaseId{" TagListDz "}"    -> VariableDz    {cons("CamelCaseId1CastAttr")}
     K CastTypeDz "String"    -> VariableDz    {cons("String1Cast")}
     K CastTypeDz "String{" TagListDz "}"    -> VariableDz    {cons("String1CastAttr")}
     K CastTypeDz "PDCModuleEntry"    -> VariableDz    {cons("PDdCModuleEntry1Cast")}
     K CastTypeDz "PDCModuleEntry{" TagListDz "}"    -> VariableDz    {cons("PDdCModuleEntry1CastAttr")}
     K CastTypeDz "EntryList"    -> VariableDz    {cons("EntryList1Cast")}
     K CastTypeDz "EntryList{" TagListDz "}"    -> VariableDz    {cons("EntryList1CastAttr")}
     K CastTypeDz "RuleParamList"    -> VariableDz    {cons("RuleParamList1Cast")}
     K CastTypeDz "RuleParamList{" TagListDz "}"    -> VariableDz    {cons("RuleParamList1CastAttr")}
     K CastTypeDz "PDCId"    -> VariableDz    {cons("PDdCId1Cast")}
     K CastTypeDz "PDCId{" TagListDz "}"    -> VariableDz    {cons("PDdCId1CastAttr")}
     K CastTypeDz "RuleBody"    -> VariableDz    {cons("RuleBody1Cast")}
     K CastTypeDz "RuleBody{" TagListDz "}"    -> VariableDz    {cons("RuleBody1CastAttr")}
     K CastTypeDz "Int"    -> VariableDz    {cons("Int1Cast")}
     K CastTypeDz "Int{" TagListDz "}"    -> VariableDz    {cons("Int1CastAttr")}
     K CastTypeDz "PDCMSGList"    -> VariableDz    {cons("PDdCMSGList1Cast")}
     K CastTypeDz "PDCMSGList{" TagListDz "}"    -> VariableDz    {cons("PDdCMSGList1CastAttr")}
     K CastTypeDz "Entry"    -> VariableDz    {cons("Entry1Cast")}
     K CastTypeDz "Entry{" TagListDz "}"    -> VariableDz    {cons("Entry1CastAttr")}
     K CastTypeDz "PDCMSG"    -> VariableDz    {cons("PDdCMSG1Cast")}
     K CastTypeDz "PDCMSG{" TagListDz "}"    -> VariableDz    {cons("PDdCMSG1CastAttr")}
     K CastTypeDz "Bool"    -> VariableDz    {cons("Bool1Cast")}
     K CastTypeDz "Bool{" TagListDz "}"    -> VariableDz    {cons("Bool1CastAttr")}
     K CastTypeDz "Char"    -> VariableDz    {cons("Char1Cast")}
     K CastTypeDz "Char{" TagListDz "}"    -> VariableDz    {cons("Char1CastAttr")}
     K CastTypeDz "List"    -> VariableDz    {cons("List1Cast")}
     K CastTypeDz "List{" TagListDz "}"    -> VariableDz    {cons("List1CastAttr")}
     K CastTypeDz "Stream"    -> VariableDz    {cons("Stream1Cast")}
     K CastTypeDz "Stream{" TagListDz "}"    -> VariableDz    {cons("Stream1CastAttr")}
     K CastTypeDz "#Int"    -> VariableDz    {cons("DzInt1Cast")}
     K CastTypeDz "#Int{" TagListDz "}"    -> VariableDz    {cons("DzInt1CastAttr")}
     K CastTypeDz "#String"    -> VariableDz    {cons("DzString1Cast")}
     K CastTypeDz "#String{" TagListDz "}"    -> VariableDz    {cons("DzString1CastAttr")}
     K CastTypeDz "#Bool"    -> VariableDz    {cons("DzBool1Cast")}
     K CastTypeDz "#Bool{" TagListDz "}"    -> VariableDz    {cons("DzBool1CastAttr")}
     K CastTypeDz "PascalCaseId"    -> VariableDz    {cons("PascalCaseId1Cast")}
     K CastTypeDz "PascalCaseId{" TagListDz "}"    -> VariableDz    {cons("PascalCaseId1CastAttr")}
     K CastTypeDz "PDCIdList"    -> VariableDz    {cons("PDdCIdList1Cast")}
     K CastTypeDz "PDCIdList{" TagListDz "}"    -> VariableDz    {cons("PDdCIdList1CastAttr")}
     K CastTypeDz "UpperCase"    -> VariableDz    {cons("UpperCase1Cast")}
     K CastTypeDz "UpperCase{" TagListDz "}"    -> VariableDz    {cons("UpperCase1CastAttr")}
     K CastTypeDz "PDCModuleEntryList"    -> VariableDz    {cons("PDdCModuleEntryList1Cast")}
     K CastTypeDz "PDCModuleEntryList{" TagListDz "}"    -> VariableDz    {cons("PDdCModuleEntryList1CastAttr")}
     K CastTypeDz "Float"    -> VariableDz    {cons("Float1Cast")}
     K CastTypeDz "Float{" TagListDz "}"    -> VariableDz    {cons("Float1CastAttr")}
     K CastTypeDz "RuleParams"    -> VariableDz    {cons("RuleParams1Cast")}
     K CastTypeDz "RuleParams{" TagListDz "}"    -> VariableDz    {cons("RuleParams1CastAttr")}
     K CastTypeDz "ExecutionEngine"    -> VariableDz    {cons("ExecutionEngine1Cast")}
     K CastTypeDz "ExecutionEngine{" TagListDz "}"    -> VariableDz    {cons("ExecutionEngine1CastAttr")}
     K CastTypeDz "IOError"    -> VariableDz    {cons("IOError1Cast")}
     K CastTypeDz "IOError{" TagListDz "}"    -> VariableDz    {cons("IOError1CastAttr")}
     K CastTypeDz "PDCRule"    -> VariableDz    {cons("PDdCRule1Cast")}
     K CastTypeDz "PDCRule{" TagListDz "}"    -> VariableDz    {cons("PDdCRule1CastAttr")}
     K CastTypeDz "RuleStatus"    -> VariableDz    {cons("RuleStatus1Cast")}
     K CastTypeDz "RuleStatus{" TagListDz "}"    -> VariableDz    {cons("RuleStatus1CastAttr")}
     K CastTypeDz "Id"    -> VariableDz    {cons("Id1Cast")}
     K CastTypeDz "Id{" TagListDz "}"    -> VariableDz    {cons("Id1CastAttr")}
     K CastTypeDz "ErrorCode"    -> VariableDz    {cons("ErrorCode1Cast")}
     K CastTypeDz "ErrorCode{" TagListDz "}"    -> VariableDz    {cons("ErrorCode1CastAttr")}
     K CastTypeDz "Map"    -> VariableDz    {cons("Map1Cast")}
     K CastTypeDz "Map{" TagListDz "}"    -> VariableDz    {cons("Map1CastAttr")}
     K CastTypeDz "#Float"    -> VariableDz    {cons("DzFloat1Cast")}
     K CastTypeDz "#Float{" TagListDz "}"    -> VariableDz    {cons("DzFloat1CastAttr")}
     K CastTypeDz "PDCModule"    -> VariableDz    {cons("PDdCModule1Cast")}
     K CastTypeDz "PDCModule{" TagListDz "}"    -> VariableDz    {cons("PDdCModule1CastAttr")}
     NatDzVar   -> Nat
     SetDzVar   -> Set
     MIntDzVar   -> MInt
     LowerCaseDzVar   -> LowerCase
     CamelCaseIdDzVar   -> CamelCaseId
     StringDzVar   -> String
     PDdCModuleEntryDzVar   -> PDdCModuleEntry
     EntryListDzVar   -> EntryList
     RuleParamListDzVar   -> RuleParamList
     PDdCIdDzVar   -> PDdCId
     RuleBodyDzVar   -> RuleBody
     IntDzVar   -> Int
     PDdCMSGListDzVar   -> PDdCMSGList
     EntryDzVar   -> Entry
     PDdCMSGDzVar   -> PDdCMSG
     BoolDzVar   -> Bool
     CharDzVar   -> Char
     ListDzVar   -> List
     StreamDzVar   -> Stream
     DzIntDzVar   -> DzInt
     DzStringDzVar   -> DzString
     DzBoolDzVar   -> DzBool
     PascalCaseIdDzVar   -> PascalCaseId
     PDdCIdListDzVar   -> PDdCIdList
     UpperCaseDzVar   -> UpperCase
     PDdCModuleEntryListDzVar   -> PDdCModuleEntryList
     FloatDzVar   -> Float
     RuleParamsDzVar   -> RuleParams
     ExecutionEngineDzVar   -> ExecutionEngine
     IOErrorDzVar   -> IOError
     PDdCRuleDzVar   -> PDdCRule
     RuleStatusDzVar   -> RuleStatus
     IdDzVar   -> Id
     ErrorCodeDzVar   -> ErrorCode
     MapDzVar   -> Map
     DzFloatDzVar   -> DzFloat
     PDdCModuleDzVar   -> PDdCModule
     K CastTypeDz "K"                         -> VariableDz    {cons("K1Cast")}
     K CastTypeDz "KItem"                     -> VariableDz    {cons("KItem1Cast")}
     K CastTypeDz "K{" TagListDz "}"        -> VariableDz    {cons("K1CastAttr")}
     K CastTypeDz "KItem{" TagListDz "}"    -> VariableDz    {cons("KItem1CastAttr")}

    VariableDz -> K


    DzDzString        -> DzString    {cons("DzString1Const")}
    DzDzBool        -> DzBool    {cons("DzBool1Const")}
    DzKLabel        -> KLabel    {cons("KLabel1Const")}
    DzDzInt        -> DzInt    {cons("DzInt1Const")}
    DzDzId        -> DzId    {cons("DzId1Const")}
    DzDzFloat        -> DzFloat    {cons("DzFloat1Const")}


context-free restrictions
    NatDzVar -/- [a-zA-Z0-9]
    SetDzVar -/- [a-zA-Z0-9]
    MIntDzVar -/- [a-zA-Z0-9]
    LowerCaseDzVar -/- [a-zA-Z0-9]
    CamelCaseIdDzVar -/- [a-zA-Z0-9]
    StringDzVar -/- [a-zA-Z0-9]
    PDdCModuleEntryDzVar -/- [a-zA-Z0-9]
    EntryListDzVar -/- [a-zA-Z0-9]
    RuleParamListDzVar -/- [a-zA-Z0-9]
    PDdCIdDzVar -/- [a-zA-Z0-9]
    RuleBodyDzVar -/- [a-zA-Z0-9]
    IntDzVar -/- [a-zA-Z0-9]
    PDdCMSGListDzVar -/- [a-zA-Z0-9]
    EntryDzVar -/- [a-zA-Z0-9]
    PDdCMSGDzVar -/- [a-zA-Z0-9]
    BoolDzVar -/- [a-zA-Z0-9]
    CharDzVar -/- [a-zA-Z0-9]
    ListDzVar -/- [a-zA-Z0-9]
    StreamDzVar -/- [a-zA-Z0-9]
    DzIntDzVar -/- [a-zA-Z0-9]
    DzStringDzVar -/- [a-zA-Z0-9]
    DzBoolDzVar -/- [a-zA-Z0-9]
    PascalCaseIdDzVar -/- [a-zA-Z0-9]
    PDdCIdListDzVar -/- [a-zA-Z0-9]
    UpperCaseDzVar -/- [a-zA-Z0-9]
    PDdCModuleEntryListDzVar -/- [a-zA-Z0-9]
    FloatDzVar -/- [a-zA-Z0-9]
    RuleParamsDzVar -/- [a-zA-Z0-9]
    ExecutionEngineDzVar -/- [a-zA-Z0-9]
    IOErrorDzVar -/- [a-zA-Z0-9]
    PDdCRuleDzVar -/- [a-zA-Z0-9]
    RuleStatusDzVar -/- [a-zA-Z0-9]
    IdDzVar -/- [a-zA-Z0-9]
    ErrorCodeDzVar -/- [a-zA-Z0-9]
    MapDzVar -/- [a-zA-Z0-9]
    DzFloatDzVar -/- [a-zA-Z0-9]
    PDdCModuleDzVar -/- [a-zA-Z0-9]
    VariableDz -/- [a-zA-Z0-9]
lexical syntax
    "#token" -> DzKLabel
    "Infinity" -> DzDzFloat
    "true" -> DzDzBool
    "'#andBool" -> DzKLabel
    "false" -> DzDzBool
    "NaN" -> DzDzFloat


%% sort predicates
    "isNat"      -> DzKLabel
    "isSymbolicNat"      -> DzKLabel
    "#symNat"      -> DzKLabel
    "isSet"      -> DzKLabel
    "isSymbolicSet"      -> DzKLabel
    "#symSet"      -> DzKLabel
    "isMInt"      -> DzKLabel
    "isSymbolicMInt"      -> DzKLabel
    "#symMInt"      -> DzKLabel
    "isLowerCase"      -> DzKLabel
    "isSymbolicLowerCase"      -> DzKLabel
    "#symLowerCase"      -> DzKLabel
    "isCamelCaseId"      -> DzKLabel
    "isSymbolicCamelCaseId"      -> DzKLabel
    "#symCamelCaseId"      -> DzKLabel
    "isSymbolicK"      -> DzKLabel
    "#symK"      -> DzKLabel
    "isString"      -> DzKLabel
    "isSymbolicString"      -> DzKLabel
    "#symString"      -> DzKLabel
    "isPDCModuleEntry"      -> DzKLabel
    "isSymbolicPDCModuleEntry"      -> DzKLabel
    "#symPDCModuleEntry"      -> DzKLabel
    "isEntryList"      -> DzKLabel
    "isSymbolicEntryList"      -> DzKLabel
    "#symEntryList"      -> DzKLabel
    "isRuleParamList"      -> DzKLabel
    "isSymbolicRuleParamList"      -> DzKLabel
    "#symRuleParamList"      -> DzKLabel
    "isPDCId"      -> DzKLabel
    "isSymbolicPDCId"      -> DzKLabel
    "#symPDCId"      -> DzKLabel
    "isRuleBody"      -> DzKLabel
    "isSymbolicRuleBody"      -> DzKLabel
    "#symRuleBody"      -> DzKLabel
    "isInt"      -> DzKLabel
    "isSymbolicInt"      -> DzKLabel
    "#symInt"      -> DzKLabel
    "isPDCMSGList"      -> DzKLabel
    "isSymbolicPDCMSGList"      -> DzKLabel
    "#symPDCMSGList"      -> DzKLabel
    "isEntry"      -> DzKLabel
    "isSymbolicEntry"      -> DzKLabel
    "#symEntry"      -> DzKLabel
    "isPDCMSG"      -> DzKLabel
    "isSymbolicPDCMSG"      -> DzKLabel
    "#symPDCMSG"      -> DzKLabel
    "isBool"      -> DzKLabel
    "isSymbolicBool"      -> DzKLabel
    "#symBool"      -> DzKLabel
    "isChar"      -> DzKLabel
    "isSymbolicChar"      -> DzKLabel
    "#symChar"      -> DzKLabel
    "isList"      -> DzKLabel
    "isSymbolicList"      -> DzKLabel
    "#symList"      -> DzKLabel
    "isStream"      -> DzKLabel
    "isSymbolicStream"      -> DzKLabel
    "#symStream"      -> DzKLabel
    "is#Int"      -> DzKLabel
    "is#String"      -> DzKLabel
    "is#Bool"      -> DzKLabel
    "isPascalCaseId"      -> DzKLabel
    "isSymbolicPascalCaseId"      -> DzKLabel
    "#symPascalCaseId"      -> DzKLabel
    "isPDCIdList"      -> DzKLabel
    "isSymbolicPDCIdList"      -> DzKLabel
    "#symPDCIdList"      -> DzKLabel
    "isUpperCase"      -> DzKLabel
    "isSymbolicUpperCase"      -> DzKLabel
    "#symUpperCase"      -> DzKLabel
    "isPDCModuleEntryList"      -> DzKLabel
    "isSymbolicPDCModuleEntryList"      -> DzKLabel
    "#symPDCModuleEntryList"      -> DzKLabel
    "isKResult"      -> DzKLabel
    "isSymbolicKResult"      -> DzKLabel
    "#symKResult"      -> DzKLabel
    "isFloat"      -> DzKLabel
    "isSymbolicFloat"      -> DzKLabel
    "#symFloat"      -> DzKLabel
    "isRuleParams"      -> DzKLabel
    "isSymbolicRuleParams"      -> DzKLabel
    "#symRuleParams"      -> DzKLabel
    "isExecutionEngine"      -> DzKLabel
    "isSymbolicExecutionEngine"      -> DzKLabel
    "#symExecutionEngine"      -> DzKLabel
    "isIOError"      -> DzKLabel
    "isSymbolicIOError"      -> DzKLabel
    "#symIOError"      -> DzKLabel
    "isPDCRule"      -> DzKLabel
    "isSymbolicPDCRule"      -> DzKLabel
    "#symPDCRule"      -> DzKLabel
    "isRuleStatus"      -> DzKLabel
    "isSymbolicRuleStatus"      -> DzKLabel
    "#symRuleStatus"      -> DzKLabel
    "isId"      -> DzKLabel
    "isSymbolicId"      -> DzKLabel
    "#symId"      -> DzKLabel
    "isErrorCode"      -> DzKLabel
    "isSymbolicErrorCode"      -> DzKLabel
    "#symErrorCode"      -> DzKLabel
    "isMap"      -> DzKLabel
    "isSymbolicMap"      -> DzKLabel
    "#symMap"      -> DzKLabel
    "isSymbolicKItem"      -> DzKLabel
    "#symKItem"      -> DzKLabel
    "is#Float"      -> DzKLabel
    "isPDCModule"      -> DzKLabel
    "isSymbolicPDCModule"      -> DzKLabel
    "#symPDCModule"      -> DzKLabel



%% terminals reject
    "NotEmptyEL" -> VARID {reject}
    "Int2Float" -> VARID {reject}
    "String2Base" -> VARID {reject}
    "Base2String" -> VARID {reject}
    "KLabel2String" -> VARID {reject}
    "Infinity" -> VARID {reject}
    "NaN" -> VARID {reject}
    "String2Int" -> VARID {reject}
    "ListItem" -> VARID {reject}
    "Float2Int" -> VARID {reject}
    "Float2String" -> VARID {reject}
    "String2Id" -> VARID {reject}
    "String2Float" -> VARID {reject}
    "String2KLabel" -> VARID {reject}
    "Int2String" -> VARID {reject}
    "Char2String" -> VARID {reject}
    "String2Char" -> VARID {reject}
    "Id2String" -> VARID {reject}
    "SetItem" -> VARID {reject}

lexical restrictions
    %% follow restrictions
    "pis" -/- [O].[f].[M].[s].[g]
    "fresh" -/- [I].[n].[t]
    "==K" -/- [L].[i].[s].[t]
    ".PDCModule" -/- [E].[n].[t].[r].[y].[L].[i].[s].[t]
    "in" -/- [K].[L].[i].[s].[t]
    "#parse" -/- [I].[n].[M].[o].[d].[u].[l].[e]
    "replace" -/- [F].[i].[r].[s].[t]
    "#system" -/- [R].[e].[s].[u].[l].[t]
    "fresh" -/- [I].[d]
    "pvs" -/- [O].[f].[M].[s].[g]
    "#parse" -/- [I].[n].[p].[u].[t]
    "replace" -/- [A].[l].[l]
    "#parse" -/- [T].[o].[k].[e].[n]
    "=/=K" -/- [L].[a].[b].[e].[l]
    "==PDCMSG" -/- [P].[a].[r].[t].[i].[a].[l]
    "prepareE" -/- [L]
    "=/=K" -/- [L].[i].[s].[t]
    "=K" -/- [L].[a].[b].[e].[l]
    ".PDCId" -/- [L].[i].[s].[t]
    "#token" -/- [T].[o].[S].[t].[r].[i].[n].[g]
    "=K" -/- [L].[i].[s].[t]
    "==K" -/- [L].[a].[b].[e].[l]
lexical restrictions
%% some restrictions to ensure greedy matching for user defined constants
    "is" -/- [\#A-Z]

lexical syntax
    [\-\+]? [0-9]+ -> DzIntDz
    [\+\-]?[0-9]+"."[0-9]+([eE][\+\-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    [\+\-]?"Infinity"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "Infinity" -> DzFloatDz {reject}
    "NaN"([fFdD]|([pP][0-9]+[xX][0-9]+))? -> DzFloatDz
    "NaN" -> DzFloatDz {reject}
    "\"" ((~[\"\n\r\\]) | (((([\\][nrtf\"\\]) | ([\\][x][0-9a-fA-F][0-9a-fA-F])) | ([\\][u][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])) | ([\\][U][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])))* "\"" -> DzStringDz
context-free syntax
    DzStringDz -> DzString {cons("DzString1Const")}
    DzIntDz -> DzInt {cons("DzInt1Const")}
    DzFloatDz -> DzFloat {cons("DzFloat1Const")}


context-free restrictions
    DzInt -/-  [0-9]
